#!/bin/bash
#
#   MobileIron Core MICS Diagnostics check script
#
#   Copyright (C) 2016  Gary McConnell - Clever Consulting Srl.
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

#
# The service to be checked is the index of the array returned from this script, the indexes may change between core and sentry versions.
# The current MICS arrays can be checked using the following bash command and this script
# for i in {0..9}; do (echo $i & ./check_mi_mics_diagnostics <VSP>:8443 <USERNAME> <PASSWORD> $i); done
#
#
#CORE
#mSERVICE=0    # "SUPPORT_SITE"
#mSERVICE=1    # "MAPQUEST"
#mSERVICE=2    # "DNS"
#mSERVICE=3    # "NTP"
#mSERVICE=4    # "EMAIL"


#SENTRY 
#mSERVICE=0 "EMM" 
#mSERVICE=2 "EAS" 
#mSERVICE=3 "DNS" 
#mSERVICE=4 "NTP" 

#LDAP Connector 7.0.4
#mSERVICE=3 "NTP" 
#mSERVICE=5 "Core" 
#mSERVICE=8 "DNS" 

# ####################################################
# Set the script name variables
# ####################################################
mSCRIPTNAME=$(basename $0)
mTEMP="$mSCRIPTNAME.XXXXXXXXXX"



# ####################################################
# Check for correct number of arguments/variables set
# ####################################################
if [ -z "$3" ]
  then
    echo "usage: $(basename $0) <HOSTNAME> <USERNAME> <PASSWORD> "
    exit 3
fi

# ####################################################
# Set the script Variables
# ####################################################
mVSP=$1
mVSP_USERNAME=$2
mVSP_PASSWORD=$3
mSERVICE=$4
mCOOKIES=$(mktemp "/tmp/$mTEMP")
mFILETMP1=$(mktemp "/tmp/$mTEMP")
mFILETMP3=$(mktemp "/tmp/$mTEMP")
mFILEJSON=/usr/lib64/nagios/plugins/check_mi_JSON



# ####################################################
# Remote Call to MobileIron Service Login
# ####################################################
curl -s -k --data "j_username=$mVSP_USERNAME&j_password=$mVSP_PASSWORD&spid=&submit=LOGIN" -H "Referer: https://$mVSP/mics/login.jsp" https://$mVSP/mics/j_spring_security_check --cookie-jar $mCOOKIES --location > $mFILETMP1

# get NONCE Value
mCSRFKEY=$(cat $mFILETMP1 | grep csrfKey | tr -s " " | cut -d "\"" -f2)
mCSRFVALUE=$(cat $mFILETMP1 | grep csrfNonce | tr -s " " | cut -d "\"" -f2)



# ####################################################
# get diagnostic status
# ####################################################

	mURL="https://$mVSP/mics/mics.html?_dc=`date +%s`&servicename=&action=getDiagnosticStatus&command=getDiagnosticStatus"
	mOUTFILE=$mFILETMP3
	
	# verifying the version and apply the correct authUserId to the curl command
        
	mVSP_VERSION=$(cat $mFILETMP1 | grep releaseVersion | tr -s " " | cut -d "." -f1 | cut -d "P" -f2)
	mVSP_AUTHUSERID=$mVSP_USERNAME

	case $mVSP_VERSION in
		 " 6") mVSP_AUTHUSERID=$mVSP_USERNAME;;
		 " 7") mVSP_AUTHUSERID=$(printf $mVSP_USERNAME | base64);;
	esac
		
	curl -s -k \
     	-H Origin:https://$mVSP \
     	-H "$mCSRFKEY: $mCSRFVALUE" \
     	-H "X-Requested-With:XMLHttpRequest" \
     	-H "authUserId:$mVSP_AUTHUSERID" \
     	-H "Content-type:application/x-www-form-urlencoded; charset=UTF-8" \
     	-H "Referer:https://$mVSP/mics/mics.html" \
     	$mURL \
     	--cookie $mCOOKIES \
     	--location > $mOUTFILE
	

# ####################################################
# Covert the response to JSON format in txt file
# ####################################################

 mSERVICENAME=$(cat $mOUTFILE | $mFILEJSON -b | grep "\[\"results\",$mSERVICE,\"servicename\"\]" | cut -f2 )
 mSERVICEMESSAGE=$(cat $mOUTFILE | $mFILEJSON -b | grep "\[\"results\",$mSERVICE,\"message\"\]" | cut -f2 | perl -MHTML::Entities -le 'while(<>) {print decode_entities($_);}' )
 mSERVICESTATUS=$(cat $mOUTFILE | $mFILEJSON -b | grep "\[\"results\",$mSERVICE,\"status\"\]" | cut -f2 )
	
# ####################################################
# Delete all files created during process
# ####################################################
rm -rf  $mCOOKIES
rm -rf $mFILETMP1
rm -rf $mFILETMP3

	
# ####################################################
# Exit script
# ####################################################

if [[ $mSERVICESTATUS == '"Success"' ]]; then
   echo "$mSERVICENAME OK: $mSERVICEMESSAGE"
   exit 0
elif [[ $mSERVICESTATUS == '"Failed"' ]]; then
   echo " $mSERVICENAME NOK: $mSERVICEMESSAGE"
   exit 2
elif [[ $mSERVICESTATUS == '"Not performed"' ]]; then
   echo " $mSERVICENAME : $mSERVICEMESSAGE"
   exit 1
else
   echo "Check failed"
   exit 3
fi
